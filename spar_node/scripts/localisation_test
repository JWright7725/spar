#!/usr/bin/env python3

import sys
from math import *
import rospy

from geometry_msgs.msg import PoseStamped
from std_msgs.msg import String
from spar_msgs.msg import ArucoLocalisation

global flight_height
flight_height = 2.0

class Localisation():
	def __init__(self):
		# Create an ROI publisher
		rospy.loginfo('Localisation Initialised')
		self.aruco_localisation_sub = rospy.Subscriber('/processed_aruco/localisation', ArucoLocalisation, self.aruco_callback_localisation)
		self.target_localisation_sub = rospy.Subscriber("/depthai_node/target_localisation", ArucoLocalisation, self.target_callback_localisation)
		self.current_x = 0
		self.current_y = 0
		# Camera Variables
		self.camera_FOV_x = 54 * (pi / 180) # [rad]
		self.camera_FOV_y = 66 * (pi / 180) # [rad]
	
	def aruco_callback_localisation(self, msg_in):
		aruco_location = self.aruco_frame_translation([msg_in.frame_x, msg_in.frame_y])
		rospy.loginfo(f'Aruco Location: {aruco_location}')

	def target_callback_localisation(self, msg_in):
		target_location = self.target_frame_translation([msg_in.frame_x, msg_in.frame_y])
		rospy.loginfo(f'Target ID: {msg_in.aruco_id}')
		rospy.loginfo(f'Taret Location: {target_location}')

	def aruco_frame_translation(self, camera_location):
		# The initial location of the UAV
		world_x = self.current_x
		world_y = self.current_y

		# Normalised osition of the target within the camera frame [-1, 1] in both x- and y-directions
		# Positive values correspond to positive values in the world frame
		## Assuming an image size of 416x416 pixels, as indicated by the rosbag images
		camera_offset_x = (208 - camera_location[0]) / 208
		camera_offset_y = (208 - camera_location[1]) / 208

		# The offset from the UAV of the target, based on the location within the camera frame
		offset_x = camera_offset_x * flight_height * tan(self.camera_FOV_x / 2) 
		offset_y = camera_offset_y * flight_height * tan(self.camera_FOV_y / 2) 

		# Add the offset to the initial location to determine the target location
		world_x += offset_x
		world_y += offset_y

		# Store the world location in a single array to be returned by the function
		world_location = [world_x, world_y]
		return world_location
	
	def target_frame_translation(self, camera_location):
		# The initial location of the UAV
		world_x = self.current_x
		world_y = self.current_y

		# Normalised position of the target within the camera frame [-1, 1] in both x- and y-directions
		# Positive values correspond to positive values in the world frame
		# The input camera position is given as the percentage position of the target centroid within the frame
		camera_offset_x = (0.5 - camera_location[0]) / 0.5
		camera_offset_y = (0.5 - camera_location[1]) / 0.5

		# The offset from the UAV of the target, based on the location within the camera frame
		offset_x = camera_offset_x * flight_height * tan(self.camera_FOV_x / 2) 
		offset_y = camera_offset_y * flight_height * tan(self.camera_FOV_y / 2) 

		# Add the offset to the initial location to determine the target location
		world_x += offset_x
		world_y += offset_y

		# Store the world location in a single array to be returned by the function
		world_location = [world_x, world_y]
		return world_location

def main(args):
    # Initialise ROS
    rospy.init_node('localisation')
     
    local = Localisation()
    # Spin!
    rospy.spin()

if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')