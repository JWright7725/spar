#!/usr/bin/env python3

import sys
from math import *

#import roslib
#roslib.load_manifest('spar_node')
import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

# Create a variable to contain the flight height of the UAV (1.5 < x < 4 [metres])
global flight_height
flight_height = 2

# Ensure flight height is within range of acceptable values
if flight_height < 1.5:
	flight_height = 1.5
elif flight_height > 4:
	flight_height = 4

def send_wp(spar_client, x, y, z, yaw):
	speed = rospy.get_param("~speed", 0.6)
	accuracy = rospy.get_param("~accuracy", 0.3)

	goal = FlightMotionGoal()
	goal.motion = FlightMotionGoal.MOTION_GOTO
	goal.position.x = x
	goal.position.y = y
	goal.position.z = z
	goal.yaw = yaw
	goal.velocity_vertical = speed
	goal.velocity_horizontal = speed
	goal.yawrate = 0.2
	goal.wait_for_convergence = True							# Wait for our takeoff "waypoint" to be reached
	goal.position_radius = accuracy
	goal.yaw_range = accuracy

	spar_client.send_goal(goal)
	 # If shutdown is issued, cancel current mission before rospy is shutdown
	rospy.on_shutdown(lambda : spar_client.cancel_goal())
	# Wait for the result of the goal
	spar_client.wait_for_result()

	#Stop at waypoint for a moment
	rospy.sleep(2)

	# Output some feedback for our motion
	return spar_client.get_state() == GoalStatus.SUCCEEDED

def send_wps(spar_client):
	success = True

	# List of waypoints
	# [X, Y, Z, Yaw]
	wps = [[-1, -1, flight_height, 0], # Fly straight up to operating height

	       [-4, -2.5, flight_height, 0], # Move to first corner
	       [4 , -2.5, flight_height, 0], # Fly along the length of the flight area

		   [4 , -1.5, flight_height, 0], # Fly to the next waypoint
	       [-4, -1.5, flight_height, 0], # Undertake the second pass

	       [-4, -0.5, flight_height, 0], # Fly to the next waypoint
	       [4 , -0.5, flight_height, 0], # Undertake the third pass

		   [4 , 0.5, flight_height, 0], # Fly to the next waypoint
	       [-4, 0.5, flight_height, 0], # Undertake the fourth pass
	       
		   [-4, 1.5, flight_height, 0], # Fly to the next waypoint
	       [4 , 1.5, flight_height, 0], # Undertake the fifth pass

		   [4 , 2.5, flight_height, 0], # Fly to the next waypoint
	       [-4, 2.5, flight_height, 0], # Undertake the sixth pass
	              
	       [-1, -1, flight_height, 0]] # Fly back to the start location

	# Loop through each waypoint in our list
	i = 0
	for wp in wps:
		rospy.loginfo("Sending waypoint %i..." % (i + 1))
		success = send_wp(spar_client, wp[0], wp[1], wp[2], wp[3])
		i += 1

		# If we had an error, print and stop sending
		if not success:
			rospy.logerr("Waypoints failed!")
			break;

	if success:
		rospy.loginfo("Waypoints complete!")

def main(args):
	# Initialise ROS
	rospy.init_node('takeoff', anonymous=True)
	# Get our action namespace (where to send flight commands to)
	action_ns = rospy.get_param("~action_topic", 'spar/flight')

	# Create our action client
	spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
	rospy.loginfo("Waiting for spar...")
	spar_client.wait_for_server()

	# Send the flight command
	# This will lock the thread until it is "done"
	# Make sure "ros is ok" in case we hit CTRL-C while waiting above
	if not rospy.is_shutdown():
		send_wps(spar_client)

if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')
